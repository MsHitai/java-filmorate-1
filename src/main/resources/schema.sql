DROP TABLE IF EXISTS users CASCADE;
DROP TABLE IF EXISTS likes CASCADE;
DROP TABLE IF EXISTS films CASCADE;
DROP TABLE IF EXISTS friends CASCADE;
DROP TABLE IF EXISTS film_genres CASCADE;
DROP TABLE IF EXISTS ratings_mpa CASCADE;
DROP TABLE IF EXISTS REVIEWS CASCADE;
DROP TABLE IF EXISTS REVIEW_LIKES CASCADE;
DROP TABLE IF EXISTS directors CASCADE;
DROP TABLE IF EXISTS films_directors CASCADE;

CREATE TABLE IF NOT EXISTS ratings_mpa
(
    rating_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS films
(
    film_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR NOT NULL,
    description VARCHAR(200),
    release_date DATE,
    duration INTEGER CHECK (duration > 0),
    rating_id INTEGER REFERENCES ratings_mpa (rating_id)
);

CREATE TABLE IF NOT EXISTS genres
(
    genre_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS film_genres
(
    film_id  BIGINT  NOT NULL REFERENCES films (film_id) ON DELETE CASCADE,
    genre_id INTEGER NOT NULL REFERENCES genres (genre_id)
);

CREATE TABLE IF NOT EXISTS users
(
    user_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email VARCHAR NOT NULL UNIQUE,
    login VARCHAR NOT NULL UNIQUE,
    name VARCHAR NOT NULL,
    birthday DATE NOT NULL
);

CREATE TABLE IF NOT EXISTS friends
(
    user_id BIGINT  NOT NULL REFERENCES users (user_id) ON DELETE CASCADE,
    friend_id BIGINT  NOT NULL REFERENCES users (user_id) ON DELETE CASCADE,
    is_mutual BOOLEAN NOT NULL,
    PRIMARY KEY (user_id, friend_id)
);

CREATE TABLE IF NOT EXISTS likes
(
    film_id BIGINT NOT NULL REFERENCES films (film_id) ON DELETE CASCADE,
    user_id BIGINT NOT NULL REFERENCES users (user_id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS directors
(
    director_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR NOT NULL
);

CREATE TABLE IF NOT EXISTS films_directors
(
    film_id BIGINT NOT NULL REFERENCES films (film_id),
    director_id BIGINT NOT NULL REFERENCES directors (director_id),
    PRIMARY KEY (film_id, director_id)
);

CREATE TABLE REVIEWS (
	ID BIGINT GENERATED BY DEFAULT AS IDENTITY,
	DESCRIPTION VARCHAR(200),
	IS_POSITIVE BOOLEAN,
	USER_ID BIGINT,
	FILM_ID BIGINT,
	CONSTRAINT REVIEWS_PK PRIMARY KEY (ID),
	CONSTRAINT REVIEWS_FILM_FK FOREIGN KEY (FILM_ID) REFERENCES FILMS(film_id) ON DELETE CASCADE,
	CONSTRAINT REVIEWS_USER_FK FOREIGN KEY (USER_ID) REFERENCES USERS(user_id) ON DELETE CASCADE ON UPDATE RESTRICT
);

CREATE TABLE REVIEW_LIKES (
    REVIEW_ID BIGINT NOT NULL,
    USER_ID BIGINT NOT NULL,
    RATING BIGINT NOT NULL,
    PRIMARY KEY (REVIEW_ID, USER_ID),
    CONSTRAINT REVIEW_LIKES_ID_FK FOREIGN KEY (REVIEW_ID) REFERENCES REVIEWS(ID) ON DELETE CASCADE,
    CONSTRAINT REVIEW_LIKES_USER_ID_FK FOREIGN KEY (USER_ID) REFERENCES USERS(user_id) ON DELETE CASCADE
);

